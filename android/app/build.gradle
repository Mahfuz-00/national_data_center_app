plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.ndc.ndc_app"
    compileSdkVersion 35
    ndkVersion "27.0.12077973"
    buildToolsVersion "35.0.1"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.tns.ndc_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 10
        versionName '1.01'
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    //outputFileName = "npo-final-v${versionCode}($versionName).apk"
                    outputFileName = "ndc-access-v${variant.versionCode}.${variant.versionName}.apk"
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

subprojects { project ->
    if (project.name == 'flutter_secure_storage') {
        project.plugins.whenPluginAdded { plugin ->
            if (plugin.class.name.contains("com.android.build.gradle.LibraryPlugin")) {
                project.android {
                    namespace 'com.it_nomads.fluttersecurestorage'
                }
            }
        }
    }
}


subprojects {
    afterEvaluate { project ->
        if (project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin("com.android.application")) {
            if (project.hasProperty("android")) {
                project.apply plugin: 'com.android.library'
                project.apply plugin: 'kotlin-android'

                project.android {
                    compileSdkVersion 35
                    defaultConfig {
                        minSdkVersion flutter.minSdkVersion
                    }

                    compileOptions {
                        sourceCompatibility JavaVersion.VERSION_17
                        targetCompatibility JavaVersion.VERSION_17
                    }

                    kotlinOptions {
                        jvmTarget = '17'
                    }

                    // Plugin-specific namespace setup
                    if (project.name == 'flutter_secure_storage') {
                        namespace 'com.it_nomads.fluttersecurestorage'
                    } else if (project.name == 'connectivity_plus') {
                        namespace 'dev.fluttercommunity.plus.connectivity'
                        // Commented-out options for reference or future use
                         } else if (project.name == 'shared_preferences_android') {
                             namespace 'io.flutter.plugins.sharedpreferences'
                        // } else if (project.name == 'webview_flutter_android') {
                        //     namespace 'io.flutter.plugins.webviewflutter'
                        // } else if (project.name == 'url_launcher_android') {
                        //     namespace 'io.flutter.plugins.urllauncher'
                        // } else if (project.name == 'path_provider_android') {
                        //     namespace 'io.flutter.plugins.pathprovider'
                        // } else if (project.name == 'share') {
                        //     namespace 'dev.fluttercommunity.plus.share'
                    } else if (project.name == 'file_picker') {
                    namespace 'com.mr.flutter.plugin.filepicker'
                } else if (project.name == 'image_picker_android') {
                    namespace 'io.flutter.plugins.imagepicker'
                } else if (project.android.namespace == null) {
                        def fallbackNamespace = "com.${project.group ?: 'example'}.${project.name}".replaceAll('-', '_')
                        namespace fallbackNamespace
                        println "âœ… Set fallback namespace for ${project.name} to ${fallbackNamespace}"
                    }
                }

                project.dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                }
            }
        }
    }
}

